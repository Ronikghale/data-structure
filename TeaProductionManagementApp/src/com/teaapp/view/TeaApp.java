package com.teaapp.view;

import com.teaapp.model.TeaModel;
import com.teaapp.controller.ValidationUtil;
import com.teaapp.controller.algorithms.BinarySearch;
import com.teaapp.controller.algorithms.InsertionSort;
import com.teaapp.controller.algorithms.SelectionSort;
import com.teaapp.controller.algorithms.MergeSort;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class TeaApp extends javax.swing.JFrame {

    private List<TeaModel> teaList;
    private java.awt.CardLayout cardLayout;

    /**
     * Creates new form TeaApp
     */
    public TeaApp() {
        initComponents();
        initializeLayout(); // Set up CardLayout and add screens
        initializeData(); // Initialize tea data and table
        startProgress(); // Show loading screen and initiate progress
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainScreenPanel = new javax.swing.JPanel();
        MainBarPanel = new javax.swing.JPanel();
        MainLogoBarLabel = new javax.swing.JLabel();
        maintabpanel = new javax.swing.JTabbedPane();
        HomePanel = new javax.swing.JPanel();
        MainPageS1 = new javax.swing.JLabel();
        MainPageS2 = new javax.swing.JLabel();
        TeaImageLabel = new javax.swing.JLabel();
        MainIntroLabel = new javax.swing.JLabel();
        LearnMoreButton = new javax.swing.JButton();
        EmployeeListPanel = new javax.swing.JPanel();
        spTblStudent = new javax.swing.JScrollPane();
        tblTea = new javax.swing.JTable();
        lblTblStudentTitle = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        locationField = new javax.swing.JPanel();
        TeaID = new javax.swing.JLabel();
        TeaName = new javax.swing.JLabel();
        teaIDField = new javax.swing.JTextField();
        nameField = new javax.swing.JTextField();
        Price = new javax.swing.JLabel();
        priceField = new javax.swing.JTextField();
        HarvestingLocation = new javax.swing.JLabel();
        harvestField = new javax.swing.JTextField();
        TeaType = new javax.swing.JLabel();
        Quality = new javax.swing.JLabel();
        addbtn = new javax.swing.JButton();
        qualityField = new javax.swing.JComboBox<>();
        teaTypeField = new javax.swing.JComboBox<>();
        SelectionSortbtn = new javax.swing.JButton();
        InsertionSort = new javax.swing.JButton();
        MergeSorting = new javax.swing.JButton();
        HarvestedDate = new javax.swing.JLabel();
        HarvestDateField = new javax.swing.JFormattedTextField();
        jLabel12 = new javax.swing.JLabel();
        ExportField = new javax.swing.JComboBox<>();
        DeleteButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        AdminControlBG = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AboutUsPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        AboutUsImage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        LogoutButton = new javax.swing.JButton();
        MainBarSloganLabel = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        LoginScreenPanel = new javax.swing.JPanel();
        LeftLoginPanel = new javax.swing.JPanel();
        LoginPgImage = new javax.swing.JLabel();
        LoginTitleLabel = new javax.swing.JLabel();
        txtFldLoginUsername = new javax.swing.JTextField();
        pwdFldLogin = new javax.swing.JPasswordField();
        LoginsubtitleLabel = new javax.swing.JLabel();
        ForgetPassLabel = new javax.swing.JLabel();
        Loginbtn = new javax.swing.JButton();
        LoginErrorLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        UserNameLabel = new javax.swing.JLabel();
        LoadingScreenPanel = new javax.swing.JPanel();
        pgbarloading = new javax.swing.JProgressBar();
        Loadinglabel = new javax.swing.JLabel();
        Logo1label = new javax.swing.JLabel();
        BGimagelabel = new javax.swing.JLabel();

        MainScreenPanel.setBackground(new java.awt.Color(0, 0, 0));
        MainScreenPanel.setMaximumSize(new java.awt.Dimension(1130, 514));
        MainScreenPanel.setMinimumSize(new java.awt.Dimension(1130, 514));
        MainScreenPanel.setPreferredSize(new java.awt.Dimension(1130, 514));
        MainScreenPanel.setSize(new java.awt.Dimension(1130, 514));

        MainBarPanel.setBackground(new java.awt.Color(44, 87, 7));

        MainLogoBarLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/tealogo-2.png"))); // NOI18N
        MainLogoBarLabel.setPreferredSize(new java.awt.Dimension(80, 260));

        maintabpanel.setBackground(new java.awt.Color(44, 87, 7));
        maintabpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));
        maintabpanel.setForeground(new java.awt.Color(255, 255, 255));
        maintabpanel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        maintabpanel.setMaximumSize(new java.awt.Dimension(1130, 514));
        maintabpanel.setMinimumSize(new java.awt.Dimension(1130, 514));
        maintabpanel.setPreferredSize(new java.awt.Dimension(1130, 514));
        maintabpanel.setSize(new java.awt.Dimension(1130, 514));

        HomePanel.setBackground(new java.awt.Color(44, 87, 7));
        HomePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));
        HomePanel.setForeground(new java.awt.Color(44, 87, 7));
        HomePanel.setMaximumSize(new java.awt.Dimension(1210, 398));

        MainPageS1.setFont(new java.awt.Font("Mshtakan", 1, 36)); // NOI18N
        MainPageS1.setForeground(new java.awt.Color(255, 255, 255));
        MainPageS1.setText("Hatey Patti  ");

        MainPageS2.setFont(new java.awt.Font("Mshtakan", 1, 24)); // NOI18N
        MainPageS2.setForeground(new java.awt.Color(255, 255, 255));
        MainPageS2.setText("A Tea Production Management System");

        TeaImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/tea.png"))); // NOI18N

        MainIntroLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        MainIntroLabel.setForeground(new java.awt.Color(255, 204, 0));
        MainIntroLabel.setText("<html> &nbsp;&nbsp;A System named Hatey patti is designed to help the tea producer<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and tea farmers manage their workloads more <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;efficiently and effectively....</br></html>");

        LearnMoreButton.setFont(new java.awt.Font("Gujarati MT", 1, 16)); // NOI18N
        LearnMoreButton.setText("Learn More");
        LearnMoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LearnMoreButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HomePanelLayout = new javax.swing.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HomePanelLayout.createSequentialGroup()
                        .addComponent(MainPageS1)
                        .addGap(138, 138, 138))
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(HomePanelLayout.createSequentialGroup()
                                .addGap(168, 168, 168)
                                .addComponent(LearnMoreButton))
                            .addGroup(HomePanelLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(MainPageS2))
                            .addGroup(HomePanelLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(MainIntroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(36, 36, 36)))
                .addComponent(TeaImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, HomePanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(MainPageS1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MainPageS2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(MainIntroLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(LearnMoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, HomePanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(TeaImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        maintabpanel.addTab("Home", HomePanel);

        EmployeeListPanel.setBackground(new java.awt.Color(0, 0, 0));

        tblTea.setBackground(new java.awt.Color(44, 87, 7));
        tblTea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TEA ID", "TEA NAME", "PRICE PER KG", "HARVEST LOCATION", "TEA TYPE", "QUALITY", "HARVESTED DAT", "EXPORT STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTea.setGridColor(new java.awt.Color(0, 0, 0));
        tblTea.setSelectionBackground(new java.awt.Color(0, 0, 0));
        tblTea.setSelectionForeground(new java.awt.Color(234, 192, 32));
        tblTea.setShowGrid(true);
        tblTea.getTableHeader().setReorderingAllowed(false);
        spTblStudent.setViewportView(tblTea);
        if (tblTea.getColumnModel().getColumnCount() > 0) {
            tblTea.getColumnModel().getColumn(0).setResizable(false);
            tblTea.getColumnModel().getColumn(1).setResizable(false);
            tblTea.getColumnModel().getColumn(2).setResizable(false);
            tblTea.getColumnModel().getColumn(3).setResizable(false);
            tblTea.getColumnModel().getColumn(4).setResizable(false);
            tblTea.getColumnModel().getColumn(4).setPreferredWidth(40);
            tblTea.getColumnModel().getColumn(5).setResizable(false);
            tblTea.getColumnModel().getColumn(6).setResizable(false);
            tblTea.getColumnModel().getColumn(7).setResizable(false);
        }

        lblTblStudentTitle.setBackground(new java.awt.Color(234, 192, 32));
        lblTblStudentTitle.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTblStudentTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTblStudentTitle.setText("Tea Information");
        lblTblStudentTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));

        searchBtn.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        searchBtn.setText("search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EmployeeListPanelLayout = new javax.swing.GroupLayout(EmployeeListPanel);
        EmployeeListPanel.setLayout(EmployeeListPanelLayout);
        EmployeeListPanelLayout.setHorizontalGroup(
            EmployeeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EmployeeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EmployeeListPanelLayout.createSequentialGroup()
                        .addComponent(spTblStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 1059, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(51, Short.MAX_VALUE))
                    .addGroup(EmployeeListPanelLayout.createSequentialGroup()
                        .addComponent(lblTblStudentTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn)
                        .addGap(352, 352, 352))))
        );
        EmployeeListPanelLayout.setVerticalGroup(
            EmployeeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EmployeeListPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(EmployeeListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTblStudentTitle)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spTblStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        maintabpanel.addTab("Tea List", EmployeeListPanel);

        locationField.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TeaID.setFont(new java.awt.Font("ITF Devanagari", 1, 16)); // NOI18N
        TeaID.setText("TEA ID");
        locationField.add(TeaID, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        TeaName.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        TeaName.setText("TEA NAME");
        locationField.add(TeaName, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        teaIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teaIDFieldActionPerformed(evt);
            }
        });
        locationField.add(teaIDField, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 54, 100, -1));
        locationField.add(nameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 144, 100, -1));

        Price.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        Price.setText("PRICE PER KG");
        locationField.add(Price, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 30, -1, -1));
        locationField.add(priceField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 54, 100, -1));

        HarvestingLocation.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        HarvestingLocation.setText("HARVESTING LOCATION");
        locationField.add(HarvestingLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 210, -1, -1));

        harvestField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harvestFieldActionPerformed(evt);
            }
        });
        locationField.add(harvestField, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 233, 100, -1));

        TeaType.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        TeaType.setText("TEA TYPE");
        locationField.add(TeaType, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        Quality.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        Quality.setText("QUALITY");
        locationField.add(Quality, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 120, -1, -1));

        addbtn.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        addbtn.setText("ADD");
        addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbtnActionPerformed(evt);
            }
        });
        locationField.add(addbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(59, 297, 81, 34));

        qualityField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Premium", "Standard", "Economy", " " }));
        qualityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qualityFieldActionPerformed(evt);
            }
        });
        locationField.add(qualityField, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 140, -1, 30));

        teaTypeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Black", "Green", "White", "Herbal", " " }));
        locationField.add(teaTypeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, -1));

        SelectionSortbtn.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        SelectionSortbtn.setText("Sort By ID");
        SelectionSortbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectionSortbtnActionPerformed(evt);
            }
        });
        locationField.add(SelectionSortbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        InsertionSort.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        InsertionSort.setText("Sort By Tea Name");
        InsertionSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertionSortActionPerformed(evt);
            }
        });
        locationField.add(InsertionSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, -1, 30));

        MergeSorting.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        MergeSorting.setText("Sort By Tea Type");
        MergeSorting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MergeSortingActionPerformed(evt);
            }
        });
        locationField.add(MergeSorting, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 50, -1, -1));

        HarvestedDate.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        HarvestedDate.setText("HARVESTED DATE");
        locationField.add(HarvestedDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, -1, -1));
        locationField.add(HarvestDateField, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 57, 130, -1));

        jLabel12.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        jLabel12.setText("EXPORT STATUS");
        locationField.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 120, -1, -1));

        ExportField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No", " " }));
        ExportField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportFieldActionPerformed(evt);
            }
        });
        locationField.add(ExportField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 144, 90, -1));

        DeleteButton.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        DeleteButton.setText("DELETE");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        locationField.add(DeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 300, 90, 30));

        UpdateButton.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        UpdateButton.setText("UPDATE");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        locationField.add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 300, 90, 30));

        ClearButton.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        ClearButton.setText("CLEAR");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });
        locationField.add(ClearButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 300, -1, 30));

        AdminControlBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/shot-teas copy.png"))); // NOI18N
        AdminControlBG.setText("jLabel10");
        locationField.add(AdminControlBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, 370));

        jLabel4.setText("jLabel4");
        locationField.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        maintabpanel.addTab("Admin Control", locationField);

        AboutUsPanel.setBackground(new java.awt.Color(44, 87, 7));
        AboutUsPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(234, 192, 32)));
        AboutUsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        jLabel5.setText("<html>Hatey Patti is a comprehensive Tea Production Management System designed to optimize and<br> streamline the various processes involved in tea production. From managing tea leaf procurement to tracking processing and distribution, Hatey Patti provides an all-in-one solution for stakeholders in the tea industry.\n\nOur mission is to empower tea producers and distributors with tools that enhance productivity, maintain quality standards, and promote sustainable practices. By focusing on user-friendly design and robust functionality, Hatey Patti aims to become an essential part of the tea production ecosystem.\n\n<br><br>Key features include:\n\n<br>i) Streamlined production tracking.\n<br>ii) Inventory and distribution management.\n<br>iii) Quality control tools.\n<br>iv) Easy reporting and analytics.");
        AboutUsPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 580, 330));

        jLabel6.setFont(new java.awt.Font("ITF Devanagari", 1, 24)); // NOI18N
        jLabel6.setText("About US");
        AboutUsPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, -1, -1));

        AboutUsImage.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        AboutUsImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/shot-teas copy.png"))); // NOI18N
        AboutUsImage.setText("<html>Hatey Patti is a comprehensive Tea Production Management System<br>designed to optimize and streamline the various processes involved in tea production. From managing tea leaf procurement to tracking processing and distribution, Hatey Patti provides an all-in-one solution for stakeholders in the tea industry.\n\nOur mission is to empower tea producers and distributors with tools that enhance productivity, maintain quality standards, and promote sustainable practices. By focusing on user-friendly design and robust functionality, Hatey Patti aims to become an essential part of the tea production ecosystem.\n\nKey features include:\n\nStreamlined production tracking.\nInventory and distribution management.\nQuality control tools.\nEasy reporting and analytics.");
        AboutUsPanel.add(AboutUsImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1114, 374));

        jLabel1.setText("jLabel1");
        AboutUsPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1407, 87, -1, -1));

        jLabel2.setText("jLabel2");
        AboutUsPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1407, 65, -1, -1));

        jLabel3.setText("jLabel3");
        AboutUsPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1407, 152, -1, -1));

        maintabpanel.addTab("About Us", AboutUsPanel);

        LogoutButton.setFont(new java.awt.Font("ITF Devanagari", 1, 14)); // NOI18N
        LogoutButton.setText("Logout");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        MainBarSloganLabel.setFont(new java.awt.Font("Mshtakan", 1, 24)); // NOI18N
        MainBarSloganLabel.setForeground(new java.awt.Color(255, 255, 255));
        MainBarSloganLabel.setText("Enhancing Tea Quality, Simplifying Production Management");

        javax.swing.GroupLayout MainBarPanelLayout = new javax.swing.GroupLayout(MainBarPanel);
        MainBarPanel.setLayout(MainBarPanelLayout);
        MainBarPanelLayout.setHorizontalGroup(
            MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainBarPanelLayout.createSequentialGroup()
                        .addComponent(MainLogoBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainBarPanelLayout.createSequentialGroup()
                                .addGap(945, 945, 945)
                                .addComponent(LogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainBarPanelLayout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(MainBarSloganLabel)))
                        .addGap(0, 6, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainBarPanelLayout.createSequentialGroup()
                        .addComponent(maintabpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MainBarPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        MainBarPanelLayout.setVerticalGroup(
            MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MainLogoBarLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MainBarPanelLayout.createSequentialGroup()
                        .addComponent(LogoutButton)
                        .addGap(8, 8, 8)
                        .addComponent(MainBarSloganLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(maintabpanel, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(MainBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MainBarPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout MainScreenPanelLayout = new javax.swing.GroupLayout(MainScreenPanel);
        MainScreenPanel.setLayout(MainScreenPanelLayout);
        MainScreenPanelLayout.setHorizontalGroup(
            MainScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        MainScreenPanelLayout.setVerticalGroup(
            MainScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        LoginScreenPanel.setBackground(new java.awt.Color(44, 87, 7));
        LoginScreenPanel.setMaximumSize(new java.awt.Dimension(1130, 514));
        LoginScreenPanel.setMinimumSize(new java.awt.Dimension(1130, 514));
        LoginScreenPanel.setPreferredSize(new java.awt.Dimension(1130, 514));

        LeftLoginPanel.setBackground(new java.awt.Color(44, 87, 7));
        LeftLoginPanel.setMaximumSize(new java.awt.Dimension(570, 514));
        LeftLoginPanel.setMinimumSize(new java.awt.Dimension(570, 514));
        LeftLoginPanel.setPreferredSize(new java.awt.Dimension(570, 514));

        LoginPgImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/pngtree-farmer-picking-tea-leaves-illustration-image_16156036.jpg"))); // NOI18N

        javax.swing.GroupLayout LeftLoginPanelLayout = new javax.swing.GroupLayout(LeftLoginPanel);
        LeftLoginPanel.setLayout(LeftLoginPanelLayout);
        LeftLoginPanelLayout.setHorizontalGroup(
            LeftLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftLoginPanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(LoginPgImage, javax.swing.GroupLayout.PREFERRED_SIZE, 546, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        LeftLoginPanelLayout.setVerticalGroup(
            LeftLoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LeftLoginPanelLayout.createSequentialGroup()
                .addContainerGap(73, Short.MAX_VALUE)
                .addComponent(LoginPgImage, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
        );

        LoginTitleLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        LoginTitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        LoginTitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LoginTitleLabel.setText("Sign in to Our App");

        txtFldLoginUsername.setForeground(new java.awt.Color(44, 87, 7));
        txtFldLoginUsername.setText("admin");
        txtFldLoginUsername.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtFldLoginUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFldLoginUsernameActionPerformed(evt);
            }
        });

        pwdFldLogin.setForeground(new java.awt.Color(44, 87, 7));
        pwdFldLogin.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pwdFldLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdFldLoginActionPerformed(evt);
            }
        });

        LoginsubtitleLabel.setBackground(new java.awt.Color(234, 192, 32));
        LoginsubtitleLabel.setForeground(new java.awt.Color(255, 255, 255));
        LoginsubtitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LoginsubtitleLabel.setText("Please enter your login details below using this app.");

        ForgetPassLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ForgetPassLabel.setForeground(new java.awt.Color(255, 255, 255));
        ForgetPassLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ForgetPassLabel.setText("Forgot your password?");

        Loginbtn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Loginbtn.setForeground(new java.awt.Color(44, 87, 7));
        Loginbtn.setText("Login");
        Loginbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginbtnActionPerformed(evt);
            }
        });

        LoginErrorLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LoginErrorLabel.setForeground(new java.awt.Color(255, 0, 0));
        LoginErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        PasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        PasswordLabel.setText("Password");

        UserNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        UserNameLabel.setText("User Name");

        javax.swing.GroupLayout LoginScreenPanelLayout = new javax.swing.GroupLayout(LoginScreenPanel);
        LoginScreenPanel.setLayout(LoginScreenPanelLayout);
        LoginScreenPanelLayout.setHorizontalGroup(
            LoginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                .addComponent(LeftLoginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(LoginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(LoginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                                .addComponent(LoginTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                                .addComponent(LoginsubtitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginScreenPanelLayout.createSequentialGroup()
                                .addComponent(ForgetPassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                                .addComponent(LoginErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginScreenPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(LoginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PasswordLabel)
                                    .addGroup(LoginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(pwdFldLogin, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                                        .addComponent(txtFldLoginUsername))
                                    .addComponent(UserNameLabel))
                                .addGap(97, 97, 97))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginScreenPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Loginbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100))))
        );
        LoginScreenPanelLayout.setVerticalGroup(
            LoginScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                .addComponent(LeftLoginPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(LoginScreenPanelLayout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(LoginErrorLabel)
                .addGap(26, 26, 26)
                .addComponent(LoginTitleLabel)
                .addGap(18, 18, 18)
                .addComponent(LoginsubtitleLabel)
                .addGap(27, 27, 27)
                .addComponent(UserNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtFldLoginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(PasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwdFldLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(ForgetPassLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Loginbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1130, 514));
        setMinimumSize(new java.awt.Dimension(1130, 514));
        setPreferredSize(new java.awt.Dimension(1130, 514));
        setSize(new java.awt.Dimension(1130, 514));

        LoadingScreenPanel.setBackground(new java.awt.Color(44, 87, 7));
        LoadingScreenPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pgbarloading.setBackground(new java.awt.Color(255, 255, 255));
        LoadingScreenPanel.add(pgbarloading, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 420, 380, 46));

        Loadinglabel.setFont(new java.awt.Font("Hiragino Mincho ProN", 1, 36)); // NOI18N
        Loadinglabel.setText("LOADING.....");
        LoadingScreenPanel.add(Loadinglabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 320, -1, -1));

        Logo1label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/tealogo.png"))); // NOI18N
        LoadingScreenPanel.add(Logo1label, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 0, 250, 500));

        BGimagelabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/teaeapp/resources/Teagarden copy.png"))); // NOI18N
        LoadingScreenPanel.add(BGimagelabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 1070, 660));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoadingScreenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoadingScreenPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// </editor-fold>                        
// Method to set up the CardLayout and add panels

    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(LoadingScreenPanel, "LoadingScreen");
        getContentPane().add(LoginScreenPanel, "LoginScreen");
        getContentPane().add(MainScreenPanel, "MainScreen");

        // Start with the loading screen
        cardLayout.show(getContentPane(), "LoadingScreen");
    }
    // Use TeaModel directly for type safety

private void initializeData() {
    teaList = new LinkedList<>();

    // Adding sample data with all fields properly initialized
    registerTea(new TeaModel(
        101, "Darjeeling", 1200.50, "Himalayan Foothills",
        "Black", "Premium", "2023-01-01", "Yes"
    ));
    registerTea(new TeaModel(
        102, "Assam", 850.75, "Brahmaputra Valley",
        "Green", "Standard", "2023- 3- 20", "No"
    ));

    // Configure table selection mode
    tblTea.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

    // Load data into the table
    loadDataToTable();

    // Add row selection listener to populate fields on selection
    tblTea.getSelectionModel().addListSelectionListener(event -> {
        if (!event.getValueIsAdjusting() && tblTea.getSelectedRow() != -1) {
            int selectedRow = tblTea.getSelectedRow();
            teaIDField.setText(tblTea.getValueAt(selectedRow, 0).toString());
            nameField.setText(tblTea.getValueAt(selectedRow, 1).toString());
            priceField.setText(tblTea.getValueAt(selectedRow, 2).toString());
            harvestField.setText(tblTea.getValueAt(selectedRow, 3).toString());
            teaTypeField.setSelectedItem(tblTea.getValueAt(selectedRow, 4).toString());
            qualityField.setSelectedItem(tblTea.getValueAt(selectedRow, 5).toString());
            HarvestDateField.setText(tblTea.getValueAt(selectedRow, 6).toString());
            ExportField.setSelectedItem(tblTea.getValueAt(selectedRow, 7).toString());
        }
    });
}

    
    // Method to simulate loading progress
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(30); // Simulated delay for progress bar
                    publish(i);
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                pgbarloading.setValue(progress);
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute();
    }

    // Method to add tea data and populate the table
    private void registerTea(TeaModel tea) {
        teaList.add(tea);
        DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
        model.addRow(new Object[]{
            tea.getTeaId(), tea.getTeaName(), tea.getPricePerKg(),
            tea.getHarvestingLocation(), tea.getTeaType(), tea.getQuality()
        });
    }

    
    
    // Method to switch screens
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }

    private void LoginbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginbtnActionPerformed
        // Get the username and password input
        String username = txtFldLoginUsername.getText();
        String password = new String(pwdFldLogin.getPassword());

        // Check if username or password is empty
        if (username.isEmpty() || password.isEmpty()) {
            LoginErrorLabel.setText("Please enter your username and password.");
        } // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            LoginErrorLabel.setText("Username and password mismatch.");
        } // If credentials are correct, proceed to load the main screen
        else {
            LoginErrorLabel.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
        }
    }//GEN-LAST:event_LoginbtnActionPerformed

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        // TODO add your handling code here:                                           
        pwdFldLogin.setText("");
        txtFldLoginUsername.setText("");
        loadScreen("LoginScreen"); // Load the main screen
    
        
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void txtFldLoginUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFldLoginUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFldLoginUsernameActionPerformed

    private void pwdFldLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdFldLoginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwdFldLoginActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        // TODO add your handling code here:
        teaIDField.setText("");
        nameField.setText("");
        priceField.setText("");
        harvestField.setText("");
        teaTypeField.setSelectedIndex(0);
        qualityField.setSelectedIndex(0);
        HarvestDateField.setText("");
        ExportField.setSelectedIndex(0); // Reset combo box to default value
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblTea.getSelectedRow();

        if (selectedRowIndex != -1) {
            DefaultTableModel model = (DefaultTableModel) tblTea.getModel();

            // Get current values from the selected row
            String currentTeaId = model.getValueAt(selectedRowIndex, 0).toString();
            String currentName = model.getValueAt(selectedRowIndex, 1).toString();
            String currentPrice = model.getValueAt(selectedRowIndex, 2).toString();
            String currentLocation = model.getValueAt(selectedRowIndex, 3).toString();
            String currentType = model.getValueAt(selectedRowIndex, 4).toString();
            String currentQuality = model.getValueAt(selectedRowIndex, 5).toString();
            String currentDate = model.getValueAt(selectedRowIndex, 6).toString();
            String currentExportStatus = model.getValueAt(selectedRowIndex, 7).toString();

            // Get new values from the input fields
            String newTeaId = teaIDField.getText().trim();
            String newName = nameField.getText().trim();
            String newPrice = priceField.getText().trim();
            String newLocation = harvestField.getText().trim();
            String newType = (String) teaTypeField.getSelectedItem();
            String newQuality = (String) qualityField.getSelectedItem();
            String newDate = HarvestDateField.getText().trim();
            String newExportStatus = (String) ExportField.getSelectedItem();

            // Check if any field has changed
            if (currentTeaId.equals(newTeaId) &&
                currentName.equals(newName) &&
                currentPrice.equals(newPrice) &&
                currentLocation.equals(newLocation) &&
                currentType.equals(newType) &&
                currentQuality.equals(newQuality) &&
                currentDate.equals(newDate) &&
                currentExportStatus.equals(newExportStatus)) {
                JOptionPane.showMessageDialog(this, "No changes detected. Update not performed.", "No Changes", JOptionPane.WARNING_MESSAGE);
            } else {
                // Update the table with new values
                model.setValueAt(newTeaId, selectedRowIndex, 0);
                model.setValueAt(newName, selectedRowIndex, 1);
                model.setValueAt(newPrice, selectedRowIndex, 2);
                model.setValueAt(newLocation, selectedRowIndex, 3);
                model.setValueAt(newType, selectedRowIndex, 4);
                model.setValueAt(newQuality, selectedRowIndex, 5);
                model.setValueAt(newDate, selectedRowIndex, 6);
                model.setValueAt(newExportStatus, selectedRowIndex, 7);

                // Clear the table selection
                tblTea.clearSelection();

                // Clear input fields
                clearTextFields();

                JOptionPane.showMessageDialog(this, "Tea record updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a tea record to update.", "No Selection", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        // Get the selected row index
        int selectedRowIndex = tblTea.getSelectedRow();

        if (selectedRowIndex != -1) {
            // Confirm deletion with the user
            int confirmation = JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete the selected tea entry?",
                "Delete Confirmation",
                JOptionPane.YES_NO_OPTION
            );

            // If user confirms, delete the row
            if (confirmation == JOptionPane.YES_OPTION) {
                DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
                model.removeRow(selectedRowIndex);

                JOptionPane.showMessageDialog(this, "Tea entry deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            // Show an error if no row is selected
            JOptionPane.showMessageDialog(this, "Please select a tea entry to delete.", "No Selection", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void ExportFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ExportFieldActionPerformed

    private void MergeSortingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MergeSortingActionPerformed
        try {
            // Create instance of MergeSort
            MergeSort sorter = new MergeSort();

            // Get the current data from table
            List<TeaModel> teaList = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) tblTea.getModel();

            // Populate teaList from table data
            for (int i = 0; i < model.getRowCount(); i++) {
                TeaModel tea = new TeaModel();
                tea.setTeaId((Integer) model.getValueAt(i, 0));
                tea.setTeaName((String) model.getValueAt(i, 1));
                tea.setPricePerKg((Double) model.getValueAt(i, 2));
                tea.setHarvestingLocation((String) model.getValueAt(i, 3));
                tea.setTeaType((String) model.getValueAt(i, 4));
                tea.setQuality((String) model.getValueAt(i, 5));
                tea.setHarvestedDate((String) model.getValueAt(i, 6));
                tea.setExportStatus((String) model.getValueAt(i, 7));
                teaList.add(tea);
            }

            // Get sort order from checkbox
            boolean isDescending = true;

            // Sort the data
            List<TeaModel> sortedList = sorter.sortByTeaType(teaList, isDescending);

            // Update table with sorted data
            model.setRowCount(0); // Clear table rows
            for (TeaModel tea : sortedList) {
                model.addRow(new Object[]{
                    tea.getTeaId(),
                    tea.getTeaName(),
                    tea.getPricePerKg(),
                    tea.getHarvestingLocation(),
                    tea.getTeaType(),
                    tea.getQuality(),
                    tea.getHarvestedDate(),
                    tea.getExportStatus()
                });
            }

            JOptionPane.showMessageDialog(this, "Table sorted by TeaType in " +
                (isDescending ? "descending" : "ascending") + " order.",
                "Sort Success",
                JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "An error occurred while sorting: " + e.getMessage(),
                "Sort Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_MergeSortingActionPerformed

    private void InsertionSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertionSortActionPerformed
        // TODO add your handling code here:
        try {
            // Ensure the tea list is not empty
            DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "The table is empty. Please add data before sorting.", "Sort Error", JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Sync teaList with table data
            teaList.clear();
            for (int i = 0; i < model.getRowCount(); i++) {
                teaList.add(new TeaModel(
                    Integer.parseInt(model.getValueAt(i, 0).toString()), // Tea ID
                    model.getValueAt(i, 1).toString(),                  // Tea Name
                    Double.parseDouble(model.getValueAt(i, 2).toString()), // Price per Kg
                    model.getValueAt(i, 3).toString(),                  // Harvesting Location
                    model.getValueAt(i, 4).toString(),                  // Tea Type
                    model.getValueAt(i, 5).toString(),                  // Quality
                    model.getValueAt(i, 6).toString(),                  // Harvested Date
                    model.getValueAt(i, 7).toString()                   // Export Status
                ));
            }

            // Perform sorting using Insertion Sort
            InsertionSort sorter = new InsertionSort();
            sorter.sortByTeaName(teaList);

            // Clear the table and repopulate with sorted data
            model.setRowCount(0);
            for (TeaModel tea : teaList) {
                model.addRow(new Object[]{
                    tea.getTeaId(),
                    tea.getTeaName(),
                    tea.getPricePerKg(),
                    tea.getHarvestingLocation(),
                    tea.getTeaType(),
                    tea.getQuality(),
                    tea.getHarvestedDate(),
                    tea.getExportStatus()
                });
            }

            JOptionPane.showMessageDialog(this, "Tea list sorted by Name in ascending order!", "Sort Success", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred while sorting: " + e.getMessage(), "Sort Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_InsertionSortActionPerformed

    private void SelectionSortbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectionSortbtnActionPerformed
        try {
            // Create an instance of SelectionSort
            SelectionSort selectionSort = new SelectionSort();

            // Get the current list of teas from table
            List<TeaModel> unsortedList = new ArrayList<>(getAllTeaData());

            // Sort by teaId in ascending order
            List<TeaModel> sortedList = selectionSort.sort(unsortedList, "teaId", false);

            // Update the UI with sorted data
            updateTableWithSortedData(sortedList);

            // Show success message
            JOptionPane.showMessageDialog(this,
                "Data sorted successfully by ID",
                "Sort Complete",
                JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            // Handle any errors
            JOptionPane.showMessageDialog(this,
                "An error occurred while sorting: " + e.getMessage(),
                "Sort Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SelectionSortbtnActionPerformed

    private void qualityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qualityFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qualityFieldActionPerformed

    private void addbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbtnActionPerformed

        try {
            // Retrieve values from text fields
            String teaIdText = teaIDField.getText();
            String teaName = nameField.getText();
            String pricePerKgText = priceField.getText();
            String harvestingLocation = harvestField.getText();
            String teaType = (String) teaTypeField.getSelectedItem();
            String quality = (String) qualityField.getSelectedItem();
            String harvestedDate = HarvestDateField.getText();
            String exportStatus = (String) ExportField.getSelectedItem();

            // Validate inputs (optional, based on your existing ValidationUtil class)
            if (!ValidationUtil.isValidTeaId(teaIdText)) {
                throw new IllegalArgumentException("Tea ID must be a positive integer.");
            }
            if (!ValidationUtil.isValidTeaName(teaName)) {
                throw new IllegalArgumentException("Tea Name must only contain letters and be between 1 to 50 characters.");
            }
            if (!ValidationUtil.isValidPricePerKg(pricePerKgText)) {
                throw new IllegalArgumentException("Price per Kg must be a valid positive number.");
            }
            if (!ValidationUtil.isValidHarvestingLocation(harvestingLocation)) {
                throw new IllegalArgumentException("Harvesting Location must be between 1 to 100 characters.");
            }
            if (!ValidationUtil.isValidTeaType(teaType)) {
                throw new IllegalArgumentException("Tea Type must be one of: Black, Green, White, Herbal.");
            }
            if (!ValidationUtil.isValidQuality(quality)) {
                throw new IllegalArgumentException("Quality must be one of: Premium, Standard, Economy.");
            }
            if (!ValidationUtil.isValidHarvestedDate(harvestedDate)) {
                throw new IllegalArgumentException("Harvested Date must be in the format yyyy-MM-dd.");
            }
            if (!ValidationUtil.isValidExportStatus(exportStatus)) {
                throw new IllegalArgumentException("Export Status must be either 'Yes' or 'No'.");
            }

            // Convert text to appropriate types
            int teaId = Integer.parseInt(teaIdText);
            double pricePerKg = Double.parseDouble(pricePerKgText);

            // Add data to the table
            DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
            model.addRow(new Object[]{teaId, teaName, pricePerKg, harvestingLocation, teaType, quality, harvestedDate, exportStatus});

            // Clear the text fields after adding
            clearTextFields();

            // Success message
            JOptionPane.showMessageDialog(this, "Data added successfully!");
        } catch (IllegalArgumentException e) {
            // Show error message in case of validation issues
            JOptionPane.showMessageDialog(this, e.getMessage(), "Validation Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Handle any unexpected errors
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        }

        // Helper method to clear text fields after adding data
        private void clearTextFields() {
            teaIDField.setText("");
            nameField.setText("");
            priceField.setText("");
            harvestField.setText("");
            teaTypeField.setSelectedIndex(0);
            qualityField.setSelectedIndex(0);
            HarvestDateField.setText("");
            ExportField.setSelectedIndex(0);
    }//GEN-LAST:event_addbtnActionPerformed

    private void harvestFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harvestFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_harvestFieldActionPerformed

    private void teaIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teaIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teaIDFieldActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        try {
            // Get the search term from the text field
            String searchTerm = searchField.getText().trim();

            // Validate search input
            if (searchTerm.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Please enter a tea name to search.",
                    "Search Error",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }

            // Get current table data
            DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
            List<TeaModel> teaList = new ArrayList<>();

            for (int i = 0; i < model.getRowCount(); i++) {
                TeaModel tea = new TeaModel();
                tea.setTeaId((Integer) model.getValueAt(i, 0));
                tea.setTeaName((String) model.getValueAt(i, 1));
                tea.setPricePerKg((Double) model.getValueAt(i, 2));
                tea.setHarvestingLocation((String) model.getValueAt(i, 3));
                tea.setTeaType((String) model.getValueAt(i, 4));
                tea.setQuality((String) model.getValueAt(i, 5));
                tea.setHarvestedDate((String) model.getValueAt(i, 6));
                tea.setExportStatus((String) model.getValueAt(i, 7));
                teaList.add(tea);
            }

            // Sort the list by tea name first (binary search requires sorted list)
            teaList.sort((t1, t2) -> t1.getTeaName().compareToIgnoreCase(t2.getTeaName()));

            // Perform binary search
            BinarySearch searcher = new BinarySearch();
            TeaModel result = searcher.searchByName(searchTerm, teaList, 0, teaList.size() - 1);

            if (result != null) {
                // Clear table selection
                tblTea.clearSelection();

                // Highlight the found row
                for (int i = 0; i < model.getRowCount(); i++) {
                    if (model.getValueAt(i, 1).toString().equalsIgnoreCase(result.getTeaName())) {
                        tblTea.setRowSelectionInterval(i, i);
                        tblTea.scrollRectToVisible(tblTea.getCellRect(i, 0, true));
                        break;
                    }
                }

                // Show success message
                JOptionPane.showMessageDialog(this,
                    "Tea found: " + result.getTeaName(),
                    "Search Success",
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Show not found message
                JOptionPane.showMessageDialog(this,
                    "No tea found with name: " + searchTerm,
                    "Search Result",
                    JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error during search: " + e.getMessage(),
                "Search Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void LearnMoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LearnMoreButtonActionPerformed
        // TODO add your handling code here:
        maintabpanel.setSelectedIndex(2);
    }//GEN-LAST:event_LearnMoreButtonActionPerformed

    // Helper method to update the table with sorted data
private void updateTableWithSortedData(List<TeaModel> sortedList) {
    // Clear existing table data
    DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
    model.setRowCount(0);
    
    // Add sorted data to table
    for (TeaModel tea : sortedList) {
        model.addRow(new Object[]{
            tea.getTeaId(),
            tea.getTeaName(),
            tea.getPricePerKg(),
            tea.getHarvestingLocation(),
            tea.getTeaType(),
            tea.getQuality(),
            tea.getHarvestedDate(),
            tea.getExportStatus()
        });
    }
}

// Helper method to get all tea data from the table
private List<TeaModel> getAllTeaData() {
    List<TeaModel> teaLists = new ArrayList<>();
    DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
    
    for (int i = 0; i < model.getRowCount(); i++) {
        TeaModel tea = new TeaModel();
        tea.setTeaId((Integer) model.getValueAt(i, 0));
        tea.setTeaName((String) model.getValueAt(i, 1));
        tea.setPricePerKg((Double) model.getValueAt(i, 2));
        tea.setHarvestingLocation((String) model.getValueAt(i, 3));
        tea.setTeaType((String) model.getValueAt(i, 4));
        tea.setQuality((String) model.getValueAt(i, 5));
        tea.setHarvestedDate((String) model.getValueAt(i, 6));
        tea.setExportStatus((String) model.getValueAt(i, 7));
        teaLists.add(tea);
    }
    
    return teaLists;
}
    
    private void loadDataToTable() {
        DefaultTableModel model = (DefaultTableModel) tblTea.getModel();
        model.setRowCount(0); // Clear existing rows
        for (Object obj : teaList) {
            if (obj instanceof TeaModel) {
                TeaModel tea = (TeaModel) obj;
                model.addRow(new Object[]{
                    tea.getTeaId(), tea.getTeaName(), tea.getPricePerKg(),
                    tea.getHarvestingLocation(), tea.getTeaType(), tea.getQuality(), tea.getHarvestedDate(), tea.getExportStatus()
                });
            }
        }
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TeaApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TeaApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TeaApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TeaApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        TeaApp app = new TeaApp();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            app.setVisible(true);
        });

        app.startProgress();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AboutUsImage;
    private javax.swing.JPanel AboutUsPanel;
    private javax.swing.JLabel AdminControlBG;
    private javax.swing.JLabel BGimagelabel;
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JPanel EmployeeListPanel;
    private javax.swing.JComboBox<String> ExportField;
    private javax.swing.JLabel ForgetPassLabel;
    private javax.swing.JFormattedTextField HarvestDateField;
    private javax.swing.JLabel HarvestedDate;
    private javax.swing.JLabel HarvestingLocation;
    private javax.swing.JPanel HomePanel;
    private javax.swing.JButton InsertionSort;
    private javax.swing.JButton LearnMoreButton;
    private javax.swing.JPanel LeftLoginPanel;
    private javax.swing.JPanel LoadingScreenPanel;
    private javax.swing.JLabel Loadinglabel;
    private javax.swing.JLabel LoginErrorLabel;
    private javax.swing.JLabel LoginPgImage;
    private javax.swing.JPanel LoginScreenPanel;
    private javax.swing.JLabel LoginTitleLabel;
    private javax.swing.JButton Loginbtn;
    private javax.swing.JLabel LoginsubtitleLabel;
    private javax.swing.JLabel Logo1label;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JPanel MainBarPanel;
    private javax.swing.JLabel MainBarSloganLabel;
    private javax.swing.JLabel MainIntroLabel;
    private javax.swing.JLabel MainLogoBarLabel;
    private javax.swing.JLabel MainPageS1;
    private javax.swing.JLabel MainPageS2;
    private javax.swing.JPanel MainScreenPanel;
    private javax.swing.JButton MergeSorting;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JLabel Price;
    private javax.swing.JLabel Quality;
    private javax.swing.JButton SelectionSortbtn;
    private javax.swing.JLabel TeaID;
    private javax.swing.JLabel TeaImageLabel;
    private javax.swing.JLabel TeaName;
    private javax.swing.JLabel TeaType;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel UserNameLabel;
    private javax.swing.JButton addbtn;
    private javax.swing.JTextField harvestField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel lblTblStudentTitle;
    private javax.swing.JPanel locationField;
    private javax.swing.JTabbedPane maintabpanel;
    private javax.swing.JTextField nameField;
    private javax.swing.JProgressBar pgbarloading;
    private javax.swing.JTextField priceField;
    private javax.swing.JPasswordField pwdFldLogin;
    private javax.swing.JComboBox<String> qualityField;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchField;
    private javax.swing.JScrollPane spTblStudent;
    private javax.swing.JTable tblTea;
    private javax.swing.JTextField teaIDField;
    private javax.swing.JComboBox<String> teaTypeField;
    private javax.swing.JTextField txtFldLoginUsername;
    // End of variables declaration//GEN-END:variables
}
